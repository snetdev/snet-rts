/* Multiply matrices A and B. There are <nodes> nodes in the system.*/

<metadata>
  <boxdefault>
    <interface value="C4SNet" />
  </boxdefault>
</metadata>

net matrix({A, B, <A_width>, <A_height>, <B_width>, <B_height>, <nodes>}
            -> {C, <C_width>, <C_height>})
{


  /* Produce rows from <first> to <last> of C by multiplying rows of A with B */

  box multiply((a, B, <A_width>, <A_height>, <B_width>, <B_height>, <first>, <last>)
                 -> (c, <C_width>, <C_height>, <first>, <last>));

  /* 
   * Split A between the nodes Each node get equaly many rows of A 
   * B is copied so tha teach node gets its own instance 
   * These tasks are done in parallel and the results are combined so that
   * each record contains A and B. 
   * 
   */ 

  net pre
  {

    /* Split A */

    box split((A, <A_width>, <A_height>, <nodes>)
               -> (a, <A_width>, <A_height>, <node>, <first>, <last>));

  } connect [{<nodes>} -> 
              if <nodes==1> then 
                {<nodes>,<T>} 
              else {<nodes>}] 
             .. split; 


  /* Merge the calculated rows of C into one matrix.
   *
   */

  net merge 
  {

    /* Reserves memory for the matrix. */

    box init((array, <C_width>, <C_height>, <last>)
               -> (C, <C_width>, <C_height>, <last>));


    /* Merges rows c (rows from <first> to <last>) into the matrix  */

    box merger((C, c, <C_width>, <C_height>, <first>, <last>)
               -> (C, <C_width>, <C_height>, <first>, <last>));


  } connect
     /* Only one chunk, rename it and bypass the merging process */

     [{c, <first>, <last>, <C_width>, <C_height>, <T>, <node>} -> 
        {C=c, <C_width>, <C_height>}
     ] 
    |    
      /* Merge all the chuncks. Chunk with row 0 is used as the base matrix. */
     (
      [{c, <node>, <C_width>, <C_height>} ->
         if <node == 0> then 
           {array=c, <C_width>, <C_height>}
         else
           {c, <C_width>, <C_height>}
      ] 
      .. (
          (init .. [{<first>, <last>} -> {<count= last - first + 1>}]) 
          |
           [{}->{}]
         ) 

      .. ( [|{C, <C_width>, <C_height>, <count>},{c, <first>, <last>}|] 
           .. (
               (merger ..[{<count>, <C_height>, <first>, <last>} ->
                           if <count + (last - first + 1) == C_height> then
                             {<C_height>, <R>}
                           else
                             {<count= count + (last - first + 1)>, <C_height>}
                         ]
               )
                | 
               [{}->{}]
              )
         )*{<R>} .. [{<R>} -> {}]
      );

} connect pre .. multiply!@<node> .. merge;
