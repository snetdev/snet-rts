<metadata> <default> <interface value="C4SNet" /> </default> </metadata>

//net fibonacci6 ({<N>} -> {<X>})
net fibonacci6
{
    net addlevel
    connect [{<N>} -> {<N>,<L=0>,<M=1>}];

    net recur
    {
        net leq1
        connect [{<N>} -> if <N <= 1> then {<T>,<N>} else {<F>,<N>}];

        net true
        connect [{<T>,<N>} -> {<R=N>}];

        net false
        connect [{<F>,<N>,<M>,<L>} -> {<N=N-1>,<L=L+1>,<M=(2*M)+1>}
                                    ; {<N=N-2>,<L=L+1>,<M=(2*M)+0>}];
    }
    connect (leq1 .. (false | true)) * {<R>};

    <metadata>
      <net name="merge">
        <observer />
        <observer_type value="both" />
        <observer_data value="tagvalues" />
      </net>
    </metadata>

    net merge
    {
        <metadata>
          <netdefault>
            <observer />
            <observer_type value="both" />
            <observer_data value="tagvalues" />
          </netdefault>
        </metadata>

        net rewrite
        connect [{<L>,<M>,<R>} -> if <L <= 0> then {<X=R>} else
                                  if <M % 2 == 0> then {<L=L>, <M=M/2>, <V=R>}
                                  else {<P=L>, <Q=M/2>, <W=R>}];
        net pair
        {
            net cells ({<L>,<M>,<V>} -> {<L>,<M>,<V>,<P>,<Q>,<W>},
                       {<P>,<Q>,<W>} -> {<L>,<M>,<V>,<P>,<Q>,<W>})
            {
                net cell
                connect [| {<L>,<M>,<V>}, {<P>,<Q>,<W>} |];

                net test
                connect [{<L>,<M>,<V>,<P>,<Q>,<W>} ->
                            if <L < P> then {<X>,<A=L>,<B=M>,<C=V>} ; {<P>,<Q>,<W>}
                            else
                            if <L > P> then {<X>,<D=P>,<E=Q>,<F=W>} ; {<L>,<M>,<V>}
                            else
                            {<X>,<R=V+W>,<L=L-1>,<M>}] ||
                        [{<L>,<M>,<V>} -> {<L>,<M>,<V>}] ||
                        [{<P>,<Q>,<W>} -> {<P>,<Q>,<W>}];
            }
            connect (cell .. test) * {<X>};

            net pick
            connect [{<X>,<R>,<L>,<M>} -> {<R>,<L>,<M>}] ||
                    [{<X>,<A>,<B>,<C>} -> {<L=A>,<M=B>,<V=C>}] ||
                    [{<X>,<D>,<E>,<F>} -> {<P=D>,<Q=E>,<W=F>}] ||
                    [{<L>,<M>,<X>,<V>} -> {<R>,<L>,<M>,<X>,<V>}] ||
                    [{<X>,<P>,<Q>,<W>} -> {<R>,<X>,<P>,<Q>,<W>}];
        }
        connect (cells .. pick) * {<R>};

        net Xpass
        connect [{<X>} -> {<X>}];
    }
    connect rewrite .. (Xpass | pair);
    //connect (rewrite .. (Xpass | pair)) * {<X>};

}
connect addlevel .. recur .. merge;
