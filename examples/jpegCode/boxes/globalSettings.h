
/*
 * globalSettings.c
 *
 *  Created on: 2013
 *      Author: vicentsanzmarco
 */

#ifndef _GLOBALSETTING_C
#define _GLOBALSETTING_C

#include <stdio.h>
#include <stdlib.h>
#include <C4SNet.h>

#define MATRIX_SIZE 8
#define MACRO_BLOCK_SIZE 16
#define NUMBER_OF_PIXELS MATRIX_SIZE*MATRIX_SIZE
#define PI 3.14159265359

typedef struct {
	   unsigned int size;               /* Header size in bytes      */
	   int width,height;       			/* Width and height of image */
	   unsigned short int planes;       /* Number of colour planes   */
	   unsigned short int bits;         /* Bits per pixel            */
	   unsigned int compression;        /* Compression type          */
	   unsigned int imagesize;          /* Image size in bytes       */
	   int xresolution,yresolution;     /* Pixels per meter          */
	   unsigned int ncolours;           /* Number of colours         */
	   unsigned int importantcolours;   /* Important colours         */
	   unsigned char palette[1024];     /* Storage for palette       */
	} INFOHEADER;

	typedef struct {
	   int restofheader; //TODO
	   INFOHEADER info;                 /* Information header        */
	} BMPHEADER;


	typedef struct {
	        unsigned char QTMarker[2];
	        unsigned char Length[2];
	        unsigned char QTInfo[130]; //bit 0..3: number of QT (0..3, otherwise error)
	                                //     bit 4..7: precision of QT, 0 = 8 bit, otherwise 16 bit
	    //    unsigned char ValuesQT[]; //max 192 values. 64*(precision+1) bytes
	} QTINFO;

	typedef struct {
	            unsigned char HTMarker[2];
	            unsigned char Length[2];
	            unsigned char HuffmanInfo[416]; //Array containing ALL huffman information
	            //For each color component holds:
	                    //First byte is used as info byte, followed by 16 bytes with values used
	                    //for counting the different huffman codes, finally the corresponding
	                    //huffman codes will follow. This sequence can repeat it self for
	                    //different Huffman tables, both DC or AC tables.

	                    //The structure of the information byte is as follows:
	                    //bit 0..3 : number of HT (0..3, otherwise error)
	                    //bit 4     : type of HT, 0 = DC table, 1 = AC table
	                    //bit 5..7 : not used, must be 0 (Used for  progressive scan JPEG)
	} HTINFO;


	typedef struct {
	            unsigned char APP0Marker[2];
	            unsigned char Length[2];
	            unsigned char Identifier[5];
	            unsigned char Version[2];
	            unsigned char Units;
	            unsigned char XDensity[2];
	            unsigned char YDensity[2];
	            unsigned char ThumbWidth;
	            unsigned char ThumbHeight;
	} APP0INFO;

	typedef struct {
	            unsigned char SOF0Marker[2];
	            unsigned char Length[2];
	            unsigned char DataPrecision; //This is in bits/sample, usually 8 (12 and 16 not supported by most software).
	            unsigned char ImageHeight[2];
	            unsigned char ImageWidth[2];
	            unsigned char Components; //Usually 1 = grey scaled, 3 = color YcbCr or YIQ 4 = color CMYK
	            unsigned char ComponentInfo[3][3]; //Read each component data of 3 bytes. It contains,
	                                       //(component Id(1byte)(1 = Y, 2 = Cb, 3 = Cr, 4 = I, 5 = Q),
	                                         //sampling factors (1byte) (bit 0-3 vertical., 4-7 horizontal.),
	                                           //quantization table number (1 byte)).
	} SOF0INFO;

	typedef struct {
	            unsigned char SOSMarker[2];
	            unsigned char Length[2]; //This must be equal to 6+2*(number of components in scan).
	            unsigned char ComponentCount; //This must be >= 1 and <=4 (otherwise error), usually 1 or 3
	            unsigned char Component[3][2]; // For each component, read 2 bytes. It contains,
	                                          //1 byte   Component Id (1=Y, 2=Cb, 3=Cr, 4=I, 5=Q),
	                                            //1 byte   Huffman table to use :
	                                              //bit 0..3 : AC table (0..3)
	                                                //bit 4..7 : DC table (0..3)
	            unsigned char Ignore[3]; //We have to skip 3 bytes
	} SOSINFO;


	typedef struct {
	            unsigned char SOIMarker[2]; //Start of image marker
	            APP0INFO app0;
	            QTINFO qt;
	            SOF0INFO sof0;
	            HTINFO ht;
	            SOSINFO sos;
	} JPEGHEADER;

//extern signed int weights[512];
static signed int weights[512] = {
	16384, 16384, 16384, 16384, 16384, 16384, 16384,
	16384, 16069, 13623, 9102, 3196, -3196, -9102, -13623, -16069, 15137,
	6270, -6270, -15137, -15137, -6270, 6270, 15137, 13623, -3196, -16069,
	-9103, 9102, 16069, 3196, -13623, 11585, -11585, -11585, 11585, 11585,
	-11585, -11585, 11585, 9102, -16069, 3196, 13623, -13623, -3197, 16069,
	-9102, 6270, -15137, 15137, -6270, -6270, 15137, -15137, 6270, 3196,
	-9103, 13623, -16069, 16069, -13623, 9102, -3196, 16384, 16384, 16384,
	16384, 16384, 16384, 16384, 16384, 16069, 13623, 9102, 3196, -3196,
	-9102, -13623, -16069, 15137, 6270, -6270, -15137, -15137, -6270, 6270,
	15137, 13623, -3196, -16069, -9103, 9102, 16069, 3196, -13623, 11585,
	-11585, -11585, 11585, 11585, -11585, -11585, 11585, 9102, -16069, 3196,
	13623, -13623, -3197, 16069, -9102, 6270, -15137, 15137, -6270, -6270,
	15137, -15137, 6270, 3196, -9103, 13623, -16069, 16069, -13623, 9102,
	-3196, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16069,
	13623, 9102, 3196, -3196, -9102, -13623, -16069, 15137, 6270, -6270,
	-15137, -15137, -6270, 6270, 15137, 13623, -3196, -16069, -9103, 9102,
	16069, 3196, -13623, 11585, -11585, -11585, 11585, 11585, -11585,
	-11585, 11585, 9102, -16069, 3196, 13623, -13623, -3197, 16069, -9102,
	6270, -15137, 15137, -6270, -6270, 15137, -15137, 6270, 3196, -9103,
	13623, -16069, 16069, -13623, 9102, -3196, 16384, 16384, 16384, 16384,
	16384, 16384, 16384, 16384, 16069, 13623, 9102, 3196, -3196, -9102,
	-13623, -16069, 15137, 6270, -6270, -15137, -15137, -6270, 6270, 15137,
	13623, -3196, -16069, -9103, 9102, 16069, 3196, -13623, 11585, -11585,
	-11585, 11585, 11585, -11585, -11585, 11585, 9102, -16069, 3196, 13623,
	-13623, -3197, 16069, -9102, 6270, -15137, 15137, -6270, -6270, 15137,
	-15137, 6270, 3196, -9103, 13623, -16069, 16069, -13623, 9102, -3196,
	16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16069, 13623,
	9102, 3196, -3196, -9102, -13623, -16069, 15137, 6270, -6270, -15137,
	-15137, -6270, 6270, 15137, 13623, -3196, -16069, -9103, 9102, 16069,
	3196, -13623, 11585, -11585, -11585, 11585, 11585, -11585, -11585,
	11585, 9102, -16069, 3196, 13623, -13623, -3197, 16069, -9102, 6270,
	-15137, 15137, -6270, -6270, 15137, -15137, 6270, 3196, -9103, 13623,
	-16069, 16069, -13623, 9102, -3196, 16384, 16384, 16384, 16384, 16384,
	16384, 16384, 16384, 16069, 13623, 9102, 3196, -3196, -9102, -13623,
	-16069, 15137, 6270, -6270, -15137, -15137, -6270, 6270, 15137, 13623,
	-3196, -16069, -9103, 9102, 16069, 3196, -13623, 11585, -11585, -11585,
	11585, 11585, -11585, -11585, 11585, 9102, -16069, 3196, 13623, -13623,
	-3197, 16069, -9102, 6270, -15137, 15137, -6270, -6270, 15137, -15137,
	6270, 3196, -9103, 13623, -16069, 16069, -13623, 9102, -3196, 16384,
	16384, 16384, 16384, 16384, 16384, 16384, 16384, 16069, 13623, 9102,
	3196, -3196, -9102, -13623, -16069, 15137, 6270, -6270, -15137, -15137,
	-6270, 6270, 15137, 13623, -3196, -16069, -9103, 9102, 16069, 3196,
	-13623, 11585, -11585, -11585, 11585, 11585, -11585, -11585, 11585,
	9102, -16069, 3196, 13623, -13623, -3197, 16069, -9102, 6270, -15137,
	15137, -6270, -6270, 15137, -15137, 6270, 3196, -9103, 13623, -16069,
	16069, -13623, 9102, -3196, 16384, 16384, 16384, 16384, 16384, 16384,
	16384, 16384, 16069, 13623, 9102, 3196, -3196, -9102, -13623, -16069,
	15137, 6270, -6270, -15137, -15137, -6270, 6270, 15137, 13623, -3196,
	-16069, -9103, 9102, 16069, 3196, -13623, 11585, -11585, -11585, 11585,
	11585, -11585, -11585, 11585, 9102, -16069, 3196, 13623, -13623, -3197,
	16069, -9102, 6270, -15137, 15137, -6270, -6270, 15137, -15137, 6270,
	3196, -9103, 13623, -16069, 16069, -13623, 9102, -3196
};

static unsigned char qtable[64] = {16, 8, 8, 16, 12, 8, 16, 16, 16, 16, 16, 16, 16, 16,
16, 32, 32, 16, 16, 16, 16, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 128, 64, 64, 128, 128, 128, 128, 128, 64, 64,
128, 128, 128, 128, 128, 64, 128, 128, 128};


static unsigned char huffmancount[4][16] = {{0x00,0x01,0x05,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00},  //standard DC table count
									{0x00,0x02,0x01,0x03,0x03,0x02,0x04,0x03,0x05,0x05,0x04,0x04,0x00,0x00,0x01,0x7D},   //standard AC table count
									{0x00,0x01,0x05,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00},  //standard DC table count
									{0x00,0x02,0x01,0x03,0x03,0x02,0x04,0x03,0x05,0x05,0x04,0x04,0x00,0x00,0x01,0x7D}};  //standard AC table count

static unsigned char huffDCvalues[12] ={0x00,  0x01,  0x02,  0x03,  0x04,  0x05,  0x06,  0x07,  0x08,  0x09,  0x0a,  0x0b};// {0x00, 0x02, 0x03, 0x04, 0x05, 0x06, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E};
static unsigned char huffACvalues[162] = {0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71,
	                                0x14, 0x32, 0x81, 0x91, 0xA1, 0x08, 0x23, 0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82,
	                                0x09, 0x0A, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	                                0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64,
	                                0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x83, 0x84, 0x85, 0x86, 0x87,
	                                0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8,
	                                0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9,
	                                0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9,
	                                0xEA, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA};

static unsigned char convertDCMagnitudeCLengthTable[16] = {
    0x02, 0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00, 0x00
};

static unsigned short convertDCMagnitudeCOutTable[16] = {
    0x0000, 0x0001, 0x0002, 0x0006, 0x000e, 0x001e, 0x003e, 0x007e,
    0x00fe, 0x01fe, 0x03fe, 0x07fe, 0x0000, 0x0000, 0x0000, 0x0000
};

static unsigned char convertACMagnitudeCLengthTable[256] = {
    0x02, 0x02, 0x03, 0x04, 0x05, 0x05, 0x06, 0x07, 0x09, 0x0a, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,    // 00 - 0f
    0x00, 0x04, 0x06, 0x08, 0x09, 0x0b, 0x0c, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 10 - 1f
    0x00, 0x05, 0x08, 0x0a, 0x0c, 0x0f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 20 - 2f
    0x00, 0x05, 0x08, 0x0a, 0x0c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 30 - 3f
    0x00, 0x06, 0x09, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 40 - 4f
    0x00, 0x06, 0x0a, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 50 - 5f
    0x00, 0x07, 0x0b, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 60 - 6f
    0x00, 0x07, 0x0b, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 70 - 7f
    0x00, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 80 - 8f
    0x00, 0x09, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 90 - 9f
    0x00, 0x09, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // a0 - af
    0x00, 0x09, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // b0 - bf
    0x00, 0x09, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // c0 - cf
    0x00, 0x0b, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // d0 - df
    0x00, 0x0e, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // e0 - ef
    0x0a, 0x0f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00
};

static unsigned short convertACMagnitudeCOutTable[256] = {
    0x0000, 0x0001, 0x0004, 0x000a, 0x0018, 0x0019, 0x0038, 0x0078, 0x01f4, 0x03f6, 0x0ff4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 00 - 0f
    0x0000, 0x000b, 0x0039, 0x00f6, 0x01f5, 0x07f6, 0x0ff5, 0xff88, 0xff89, 0xff8a, 0xff8b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 10 - 1f
    0x0000, 0x001a, 0x00f7, 0x03f7, 0x0ff6, 0x7fc2, 0xff8c, 0xff8d, 0xff8e, 0xff8f, 0xff90, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 20 - 2f
    0x0000, 0x001b, 0x00f8, 0x03f8, 0x0ff7, 0xff91, 0xff92, 0xff93, 0xff94, 0xff95, 0xff96, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 30 - 3f
    0x0000, 0x003a, 0x01f6, 0xff97, 0xff98, 0xff99, 0xff9a, 0xff9b, 0xff9c, 0xff9d, 0xff9e, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 40 - 4f
    0x0000, 0x003b, 0x03f9, 0xff9f, 0xffa0, 0xffa1, 0xFFA2, 0xFFA3, 0xFFA4, 0xFFA5, 0xFFA6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 50 - 5f
    0x0000, 0x0079, 0x07f7, 0xffa7, 0xffa8, 0xffa9, 0xffaa, 0xffab, 0xFFAc, 0xFFAf, 0xFFAe, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 60 - 6f
    0x0000, 0x007a, 0x07f8, 0xffaf, 0xffb0, 0xFFB1, 0xFFB2, 0xFFB3, 0xFFB4, 0xFFB5, 0xFFB6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 70 - 7f
    0x0000, 0x00f9, 0xffb7, 0xFFB8, 0xFFB9, 0xFFBa, 0xFFBb, 0xFFBc, 0xFFBd, 0xFFBe, 0xFFBf, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 80 - 8f
    0x0000, 0x01f7, 0xffc0, 0xffc1, 0xFFC2, 0xFFC3, 0xFFC4, 0xFFC5, 0xFFC6, 0xFFC7, 0xFFC8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 90 - 9f
    0x0000, 0x01f8, 0xffc9, 0xFFCa, 0xFFCb, 0xFFCc, 0xFFCd, 0xFFCe, 0xFFCf, 0xFFd0, 0xFFd1, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // a0 - af
    0x0000, 0x01f9, 0xFFD2, 0xFFD3, 0xFFD4, 0xFFD5, 0xFFD6, 0xFFD7, 0xFFD8, 0xFFD9, 0xFFDa, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // b0 - bf
    0x0000, 0x01fa, 0xFFDb, 0xFFDc, 0xFFDd, 0xFFDe, 0xFFDf, 0xFFe0, 0xFFe1, 0xFFe2, 0xFFe3, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // c0 - cf
    0x0000, 0x07f9, 0xFFE4, 0xFFE5, 0xFFE6, 0xFFE7, 0xFFE8, 0xFFE9, 0xFFEa, 0xFFEb, 0xFFEc, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // d0 - df
    0x0000, 0x3fe0, 0xffed, 0xFFEe, 0xFFEf, 0xFFf0, 0xFFF1, 0xFFF2, 0xFFF3, 0xFFF4, 0xFFF5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // e0 - ef
    0x03fa, 0x7fc3, 0xFFF6, 0xFFF7, 0xFFF8, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};



static unsigned char convertDCMagnitudeYLengthTable[16] = {
    0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x05,
    0x06, 0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00
};

static unsigned short convertDCMagnitudeYOutTable[16] = {
    0x0000, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x000e, 0x001e,
    0x003e, 0x007e, 0x00fe, 0x01fe, 0x0000, 0x0000, 0x0000, 0x0000
};


static unsigned char convertACMagnitudeYLength[256] = {
    0x04, 0x02, 0x02, 0x03, 0x04, 0x05, 0x07, 0x08, 0x0a, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 00 - 0f
    0x00, 0x04, 0x05, 0x07, 0x09, 0x0b, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 10 - 1f
    0x00, 0x05, 0x08, 0x0a, 0x0c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 20 - 2f
    0x00, 0x06, 0x09, 0x0c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 30 - 3f
    0x00, 0x06, 0x0a, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 40 - 4f
    0x00, 0x07, 0x0b, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 50 - 5f
    0x00, 0x07, 0x0c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 60 - 6f
    0x00, 0x08, 0x0c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 70 - 7f
    0x00, 0x09, 0x0f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 80 - 8f
    0x00, 0x09, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // 90 - 9f
    0x00, 0x09, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // a0 - af
    0x00, 0x0a, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // b0 - bf
    0x00, 0x0a, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // c0 - cf
    0x00, 0x0b, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // d0 - df
    0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,    // e0 - ef
    0x0b, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00
};

static unsigned short convertACMagnitudeYOut[256] = {
    0xFFFA, 0xFFF0, 0xFFF1, 0xFFF4, 0xFFFB, 0xFFFA, 0xFFF8, 0xFFF8, 0xFFF6, 0xFF82, 0xFF83, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 00 - 0f
    0x0000, 0xFFFC, 0xFFFB, 0xFFF9, 0xFFF6, 0xFFF6, 0xFF84, 0xFF85, 0xFF86, 0xFF87, 0xFF88, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 10 - 1f
    0x0000, 0xFFFC, 0xFFF9, 0xFFF7, 0xFFF4, 0xFF89, 0xFF8A, 0xFF8B, 0xFF8C, 0xFF8D, 0xFF8E, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 20 - 2f
    0x0000, 0xFFFA, 0xFFF7, 0xFFF5, 0xFF8F, 0xFF90, 0xFF91, 0xFF92, 0xFF93, 0xFF94, 0xFF95, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 30 - 3f
    0x0000, 0xFFFB, 0xFFF8, 0xFF96, 0xFF97, 0xFF98, 0xFF99, 0xFF9A, 0xFF9B, 0xFF9C, 0xFF9D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 40 - 4f
    0x0000, 0xFFFA, 0xFFF7, 0xFF9E, 0xFF9F, 0xFFA0, 0xFFA1, 0xFFA2, 0xFFA3, 0xFFA4, 0xFFA5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 50 - 5f
    0x0000, 0xFFFB, 0xFFF6, 0xFFA6, 0xFFA7, 0xFFA8, 0xFFA9, 0xFFAA, 0xFFAB, 0xFFAC, 0xFFAD, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 60 - 6f
    0x0000, 0xFFFA, 0xFFF7, 0xFFAE, 0xFFAF, 0xFFB0, 0xFFB1, 0xFFB2, 0xFFB3, 0xFFB4, 0xFFB5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 70 - 7f
    0x0000, 0xFFF8, 0xFFC0, 0xFFB6, 0xFFB7, 0xFFB8, 0xFFB9, 0xFFBA, 0xFFBB, 0xFFBC, 0xFFBD, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 80 - 8f
    0x0000, 0xFFF9, 0xFFBE, 0xFFBF, 0xFFC0, 0xFFC1, 0xFFC2, 0xFFC3, 0xFFC4, 0xFFC5, 0xFFC6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // 90 - 9f
    0x0000, 0xFFFA, 0xFFC7, 0xFFC8, 0xFFC9, 0xFFCA, 0xFFCB, 0xFFCC, 0xFFCD, 0xFFCE, 0xFFCF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // a0 - af
    0x0000, 0xFFF9, 0xFFD0, 0xFFD1, 0xFFD2, 0xFFD3, 0xFFD4, 0xFFD5, 0xFFD6, 0xFFD7, 0xFFD8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // b0 - bf
    0x0000, 0xFFFA, 0xFFD9, 0xFFDA, 0xFFDB, 0xFFDC, 0xFFDD, 0xFFDE, 0xFFDF, 0xFFE0, 0xFFE1, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // c0 - cf
    0x0000, 0xFFF8, 0xFFE2, 0xFFE3, 0xFFE4, 0xFFE5, 0xFFE6, 0xFFE7, 0xFFE8, 0xFFE9, 0xFFEA, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // d0 - df
    0x0000, 0xFFEB, 0xFFEC, 0xFFED, 0xFFEE, 0xFFEF, 0xFFF0, 0xFFF1, 0xFFF2, 0xFFF3, 0xFFF4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,    // e0 - ef
    0xFFF9, 0xFFF5, 0xFFF6, 0xFFF7, 0xFFF8, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};


static unsigned char quantization_table[MATRIX_SIZE][MATRIX_SIZE] ={
		{4, 3, 3, 4, 4, 5, 6, 6},
        {3, 3, 4, 4, 5, 6, 6, 6},
        {4, 4, 4, 4, 5, 6, 6, 6},
        {4, 4, 4, 5, 6, 6, 6, 6},
        {4, 4, 5, 6, 6, 7, 7, 6},
        {4, 5, 6, 6, 6, 7, 7, 6},
        {6, 6, 6, 6, 7, 7, 7, 7},
        {6, 6, 6, 7, 7, 7, 7, 7}
    };



// Function for set and get in the array for signed char
void set_array_char( int row, int matrix_size, int col, signed char value, signed char *array );
signed char get_array_char( int row, int matrix_size, int col, signed char *array );
void set_array_short( int row, int matrix_size, int col, signed short value, signed short *array );
signed short get_array_short( int row, int matrix_size, int col, signed short *array );
#endif
